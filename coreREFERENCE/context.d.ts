import type { ResponseOptions, CookieOptions, SigningOptions, Context as IContext, AsJsonValue, JsonValue, HttpStatus } from './types';
import type { BunFile } from 'bun';
export declare class Context implements IContext {
    private readonly req;
    private readonly res;
    private readonly cookieManager;
    private params;
    private readonly locals;
    constructor(request: Request);
    setCookie(name: string, value: string, options?: CookieOptions & {
        signing?: SigningOptions;
    }): void;
    getCookie(name: string, options?: {
        signing?: SigningOptions;
    }): string | null;
    delCookie(name: string, options?: Omit<CookieOptions, 'maxAge' | 'sameSite'>): void;
    private validateKey;
    set<T>(key: string, value: T): void;
    get<T>(key: string): T | undefined;
    has(key: string): boolean;
    delete(key: string): void;
    getAll(): ReadonlyMap<string, {
        type: string;
        value: unknown;
    }>;
    getAllKeys(): string[];
    setParam(key: string, value: string): void;
    setParams(params: Record<string, string>): void;
    getParam(key: string): string | undefined;
    getAllParams(): Readonly<Record<string, string>>;
    getResponse(): Response;
    setResponse(response: Response): this;
    updateResponse(newResponse: Response): void;
    getMethod(): string;
    getUrl(): string;
    getHeaders(): Headers;
    param(key: string): string | null;
    query(): Record<string, string | string[]>;
    getParams(...keys: string[]): Record<string, string | null>;
    reqHeader(name: string): string | null;
    reqAllHeaders(): Record<string, string>;
    getPathname(): string;
    getContentType(): string | null;
    getBody<T extends JsonValue | FormData | string | ArrayBuffer | null>(): Promise<T | null>;
    hasHeader(name: string): boolean;
    hasBody(): boolean;
    hasParam(key: string): boolean;
    json<T>(data: AsJsonValue<T>, options?: ResponseOptions): Response;
    text(text: string, options?: ResponseOptions): Response;
    html(html: string, options?: ResponseOptions): Response;
    redirect(url: string, options?: ResponseOptions): Response;
    notFound(message?: string, options?: ResponseOptions): Response;
    badRequest(message?: string): Response;
    serverError(message?: string): Response;
    created<T extends object = Record<string, any>>(data: T, options?: ResponseOptions): Response;
    file(data: Blob | ArrayBuffer | ReadableStream | BunFile, filename: string, options?: ResponseOptions): Response;
    formData(data: FormData, options?: ResponseOptions): Response;
    stream(stream: ReadableStream<Uint8Array>, options?: ResponseOptions): Response;
    appendHeader(name: string, value: string): void;
    setHeader(name: string, value: string): void;
    setHeaders(headers: Record<string, string>): void;
    getHeader(name: string): string | null;
    getAllHeaders(): Record<string, string>;
    removeHeader(name: string): void;
    noContent(options?: ResponseOptions): Response;
    getStatus(): HttpStatus;
}
